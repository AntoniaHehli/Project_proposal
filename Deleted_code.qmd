```{r filter Posmo tracks to CH and ZH}
# filter Zurich
zurich <- CH_cantons |> 
  filter(NAME == "Zürich")

# transform the coordinate system to the Swiss crs to intersect with boundaries
posmo_filter <- posmo_filter |>
  st_transform(crs = 2056)

# get only the coordinates of the transformed Posmo data
posmo_coord <- st_coordinates(posmo_filter)

# append the single X and Y value to the sf object
posmo_filter$X <- posmo_coord[,1]
posmo_filter$Y <- posmo_coord[,2]

# filter points that are within Zurich
posmo_ZH <- st_filter(posmo_filter, zurich)

# check if it worked (Zurich)
ggplot(posmo_ZH, aes(color = transport_mode)) + 
  geom_sf() +
  coord_sf(datum = st_crs(2056))+
  labs(x = "E",
       y = "N",
       title = "Posmo tracks in the canton of Zurich") +
  guides(color = guide_legend(title = "Transport Mode"))+
  theme_minimal()
```

#### Trajectories within the canton of Zurich

```{r number of days per user ZH}
# save the unique user_ids in the data set
posmo_ZH_userids <- unique(posmo_ZH$user_id) 

# make an empty data frame with the number of days per users
posmo_ZH_days_per_user <- data.frame(user_id = posmo_ZH_userids)

# create an empty vector to append
number_of_days = c()
number_of_weeks = c()

# use the created function
for (i in posmo_ZH_userids){
  day = get_days(i, posmo_ZH)
  number_of_days <- append(number_of_days, day)
  week = day/7
  number_of_weeks <- append(number_of_weeks, week)
}

# add the number of days and weeks to the user_id
posmo_ZH_days_per_user$days <- number_of_days
posmo_ZH_days_per_user$weeks <- round(number_of_weeks, 3)

```

We can now sum the length [km] per transportation medium and person to get an idea about their carbon dioxide emissions. Because the different users recorded a different amount of days and weeks, we divide the emissions by the number of weeks. Therefore, we get the average weekly emissions per user.

```{r calculate emissions ZH}
# calculate the distances [m], the timelag [s], the speed [m/s], and the speed [km/h]: use group_by to make sure it only calculates for one user id and not between different user ids
posmo_ZH <- posmo_ZH |>
  group_by(user_id)|>
  mutate(
    distance_m = sqrt((lead(X, 1) - X)^2 + (lead(Y, 1) - Y)^2),
    distance_km = distance_m/1000,
    timelag_s = as.integer(difftime(lead(datetime), datetime),
                           units = "secs"),
    speed_ms = (distance_m/timelag_s),
    speed_kmh = (speed_ms*3.6)
    ) |>
  ungroup()

# remove NA distance values
posmo_ZH <- posmo_ZH |> 
  filter(!is.na(distance_km))

# group by user_id and transport_mode and sum up the distance in km
posmo_ZH_traveldistance <- 
  posmo_ZH |> 
  group_by(user_id, transport_mode) |>
  summarise(sum_km = sum(distance_km))

# create a look-up table for the different emission constants
constants_table <- data.frame(
  transport_mode = c("Airplane", "Bike", "Bus", "Car", "E_Bike", "Train", "Tram"),
  stringsAsFactors = FALSE
)

# include values for emissions and calculate mean, min and max
constants_table$constant_gkm <- list(c_plane, c_bike, c_bus, c_car, c_ebike, c_train, c_tram) 
constants_table <- constants_table |>
  mutate(
    avg = lapply(constant_gkm, mean),
    min = lapply(constant_gkm, min),
    max = lapply(constant_gkm, max)
  )

# join the lookup table to the initial data frame
posmo_ZH_traveldistance <- posmo_ZH_traveldistance |> 
  left_join(constants_table, by = "transport_mode")

# join the number of recording days to the data frame
posmo_ZH_traveldistance <- posmo_ZH_traveldistance |> 
  left_join(posmo_ZH_days_per_user, by = "user_id")

# multiply the CO2 emissions constant with the traveled distance and divide by the number of recorded days/weeks
posmo_ZH_traveldistance <- posmo_ZH_traveldistance |>
  mutate(co2_emissions_g = sum_km * constant_gkm,
         co2_emissions_g_per_d = co2_emissions_g/days,
         co2_emissions_g_per_w = co2_emissions_g/weeks)

```

We create a bar chart to have an overview.

```{r total emission ZH}
# calculate the total emissions by user ID and transportation mode
emissions_ZH <- aggregate(co2_emissions_g_per_w ~ user_id + transport_mode, posmo_ZH_traveldistance, sum)

# create the bar chart
ggplot(emissions_ZH, aes(x = user_id, y = co2_emissions_g_per_w, fill = transport_mode)) +
  geom_bar(stat = "identity", position = "dodge") +
  labs(x = "Users", y = "Total Emissions [g/week]", fill = "Transport Mode",
       subtitle = "Movement trajectories within the canton of Zurich") +
  ggtitle("Total Emissions by User ID and Transportation Mode per Week") +
  theme_minimal()+
  theme(axis.text.x = element_blank())
```

```{r plot emissions CH and ZH}
# for Zurich
ggplot() + 
  geom_sf(data = zurich, aes(alpha = 100)) +
  geom_sf(data = posmo_ZH_traveldistance, aes(color = co2_emissions_g_per_w))+
  labs(title = "Total Emissions per Transport Mode and User",
     subtitle = "Movement trajectories in the Canton of Zurich",
     x = "E",
     y = "N")+
  scale_color_continuous(name = "CO2 emissions [g/week]", type = "viridis")+
  scale_alpha_continuous(guide = "none") +
  coord_sf(datum = st_crs(2056))+
  theme_minimal()

```

```{r calculate slope in percentage, warning = FALSE}
# for Zurich
posmo_ZH <- posmo_ZH |>
  group_by(user_id)|>
  mutate(
    height_diff = lead(height, 1) - height,
    horizontal_diff = sqrt((plus1**2)- (height_diff**2)),
    slope_percent = (height_diff / horizontal_diff)*100
    )|>
  ungroup()

```

```{r}
# filter to all cars
posmo_ZH_car <- posmo_ZH |>
  group_by(user_id) |>
  filter(transport_mode == "Car") |>
  # divide the speed by 5 and multiply by 5 after flooring to get classes of interval 5
  mutate(speed_kmh_floored = floor(speed_kmh/5) * 5) |>
  ungroup()

```

```{r calcualte acceleration for Zurich}
posmo_ZH <- posmo_ZH |>
  group_by(user_id)|>
  mutate(
    speed_change_ms = lead(speed_ms, 1) - speed_ms,
    acceleration_ms2 = speed_change_ms/timelag_s,
    acceleration = acceleration_ms2 >= 0)|>
  ungroup()
```

```{r plot (de)acceleration for ZH}
ggplot()+
  geom_sf(data = posmo_ZH, aes(color = acceleration))+
  labs(title = "Locations with acceleration",
     subtitle = "Movement trajectories in the canton of Zurich",
     x = "E",
     y = "N")+
  guides(color = guide_legend(title = "Acceleration"))+
  coord_sf(datum = st_crs(2056))+
  theme_minimal()
```

```{r function to get the weekly emissions}
# define a function to get the number of weekdays recorded per user id using the average
weekly_emissions <- function(posmo_data, constants){
  # make sure Date is provided as date and not as datetime
  posmo_data$week <- isoweek(as.Date(posmo_data$datetime))
  weekly_distance <- aggregate(distance_km ~ user_id + week + transport_mode, posmo_data, FUN = sum)
  weekly_emission <- weekly_distance |>
    left_join(constants, by = "transport_mode")
  weekly_emission <- weekly_emission |>
    mutate(
      co2_emission = distance_km * avg
    )
  return(weekly_emission)
}

weekly_emission <- weekly_emissions(posmo, constants_emission)
```

Abbildung von allen Posmo tracks mit unseren Verkehrsmitteln.

```{r plot all tracks, output = TRUE}
#| label: fig-secondFigure
#| fig-cap: Posmo tracks for our analysis colored by transport mode.
ggplot(posmo, aes(color = transport_mode)) + 
  geom_sf()+
  labs(x = "E",
       y = "N",
       title = "All posmo tracks for the analysis",
       color = "Transport Mode")+
  coord_sf(datum = st_crs(2056))+
  theme_minimal()
```


Abbildung von den ersten vier Datenpunkten aus dem Paper.

```{r plot known emission values depending on speed}
#| label: fig-fourthFigure
#| fig-cap: CO~2~ emission values for cars depending on speed (Umweltbundesamt, n.d.).
# plot them
ggplot()+
  geom_point(aes(x = speed, y = emission))+
  geom_line(aes(x = speed, y = emission))+
  labs(title = expression("CO"["2"]~ "Emission Values for Cars Depending on Speed"),
       x = "Speed [km/h]",
       y = expression("CO"["2"] ~ "Emission [g/km]")) +
  theme_minimal()
```


Average weekly emissions per transportation for speed and slope

*restliche transport modes darstellen??* die sind dann im Vergleich, ansonsten haben wir das wieder doppelt. Oder habe ich etwas falsch verstanden? *sorry doof geschrieben: macht es sinn die anderen transport modes (train, bus, bike) hier darzustellen, da sich ja logischerweise nur car ändert; evtl. nur abbildung mit car? oder mache ich einen überlegungsfehler*

```{r plot average weekly emission, output = TRUE}
# create the bar chart
emissions_plot_speed_car <- ggplot(emissions_new, aes(x = user_id, y = co2_emissions_g_per_w, 
                                                      fill = transport_mode)) +
  geom_bar(stat = "identity", position = "stack") +
  labs(x = "Users", 
       y = expression("CO"["2"]~ "Emissions [g/week]"), 
       fill = "Transport Mode",
       subtitle = "Car emissions calculated based on speed") +
  ggtitle("Average Weeky Emissions per Transportation Mode & User")+
  ylim(0, 45000)+
  theme_minimal()+
  theme(axis.text.x = element_blank(),
        plot.title = element_text(size = 10),
        plot.subtitle = element_text(size = 8))

#| label: fig-twelthFigure
#| fig-cap: Comparison between CO~2~ emission of all transports mode with mode car calculated using a simple distance-based scenario (left) and a scenario based on driving speed (right).
emissions_plot_speed_car
```

```{r}

# create the bar chart
emissions_plot_slope_car <- ggplot(emissions_new_slope, 
                                   aes(x = user_id, 
                                       y = co2_emissions_g_per_w, 
                                       fill = transport_mode)) +
  geom_bar(stat = "identity", position = "stack") +
  labs(x = "Users", 
       y = expression("CO"["2"]~ "Emissions [g/week]"), 
       fill = "Transport Mode",
       subtitle = "Car emissions calculated based on slope") +
  ggtitle("Average Weekly Emissions per Mode of Transport & User") +
  ylim(0, 48000)+
  theme_minimal()+
  theme(axis.text.x = element_blank(),
        plot.title = element_text(size = 10),
        plot.subtitle = element_text(size = 8))

#| label: fig-seventeenthFigure
#| fig-cap: CO~2~ emission values for all transportat modes per user and week with car emissions calculated based on slope and speed.
emissions_plot_slope_car
```

```{r}
 
 ggplot()+
  geom_sf(aes(color = emission_increase_perc))+
  geom_sf(data = CH_cantons, alpha = 0) +
  labs(x = "E",
       y = "N")+
  scale_color_continuous(name = expression("CO"["2"]~ "emission increase [%]"), type = "viridis")+
  coord_sf(datum = st_crs(2056))+
  theme_minimal()+
  theme(plot.title = element_text(size = 14))
```

```{r plot car tracks above DHM, output = TRUE}
#| label: fig-thirteenthFigure
#| fig-cap: Trajectories of all users.

# convert the car data to WGS84 to use it with leaflet
posmo_car_wgs84 <- posmo_car |>
  st_transform(crs = 4326)

# create a color palette
pal <- colorFactor("Set1", posmo_car_wgs84$user_id)

# create the leaflet map with a relief as background
leaflet(posmo_car_wgs84) |>
  addTiles(urlTemplate = 'https://server.arcgisonline.com/ArcGIS/rest/services/World_Shaded_Relief/MapServer/tile/{z}/{y}/{x}') |>
  addCircleMarkers(opacity = 0.5, 
                   color = ~pal(user_id),
                   radius = 2) |>
  addLegend(position = 'topright',
            pal = pal,
            values = ~user_id,
            title = "User ID") |> 
  addScaleBar(position = "bottomleft", scaleBarOptions(imperial = FALSE))
```

*define segment id did not work*

```{r define segments and plot one}
rle_id <- function(vec) {
  x <- rle(vec)$lengths
  as.factor(rep(seq_along(x), times = x))
}

car_speed <- posmo_car |>
  left_join(constants_emission, by = "transport_mode") |>
  mutate(
    speed_emission = avg * emission_increase_perc,
    segment_id = rle_id(static)
  )
```


*brauchen wir getDays function oder eigentlich nur getWeeks?? könnte man Funktion umschreiben?* Wir bräuchten nur get_weeks. Habe es versucht, hat auf die schnelle nicht geklappt. --> am abend versuchen
