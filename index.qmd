---
title: The title of your Semesterproject
subtitle: A subtle subtitle
author: Laura Haus and Antonia Hehli
output: html
---

## Settings

```{r}
# import libraries
library("dplyr")
library("ggplot2")
library("readr")
library("raster")
library("sf")
library("terra")
library("lubridate")
```

## Abstract

## Introduction

Road transportation is responsible for around 20 percent of global carbon dioxide emission whereof almost half of these emissions are caused by passenger road vehicles (Suarez et al., 2022). Due to the strongly negative impact of carbon dioxide emissions on climate change, they world widely receive gradually increasing concern (Dong et al., 2022). Driving behavior like acceleration as well as terrain characteristics such as an incline have valid impacts on carbon dioxide emissions (Dong et al., 2022; Suarez et al., 2022; Xu et al., 2022).

However, road traffic is not the only type of traffic that causes carbon dioxide emissions. Trains, trams, and – when also taking production emissions into account – even bicycles cause carbon dioxide emissions. Therefore, we will also take these transportation modes into account.
In this project, we analyze carbon dioxide emissions by different transportation types using different complexity levels as well as emission scenarios and compare these different setups with each other. We use validated movement data collected by the Posmo app from XY students of the course Computational Movement Analysis in Spring 2023 at ZHAW.

## Material and Methods

### Preprocessing

```{r function loadPosmoData}
# define a function to load the posmo data

loadPosmoData <- function(filepath){
  read_delim(filepath, delim = ",") |>
    
    # we do not need the place name
    subset(select = -c(place_name)) |>
    
    # remove NA values for transport mode, we need a specified transport mode
    filter(!is.na(transport_mode))
  }

```

```{r load validated data}
# load all validated Posmo track files
posmo1 <- loadPosmoData("data/posmo_tracks/posmo_1.csv") #Antonia
posmo2 <- loadPosmoData("data/posmo_tracks/posmo_2.csv") #Laura
posmo3 <- loadPosmoData("data/posmo_tracks/posmo_3.csv") #Posmo Pool

posmo <- full_join(posmo1, posmo2)
posmo <- full_join(posmo, posmo3)

# remove rows with NA in the coordinates
posmo <- posmo[!is.na(posmo$lon_x), ]

# convert to sf object
posmo <- st_as_sf(posmo, coords = c("lon_x", "lat_y"), crs = 4326) |>
  st_transform(2056)

# extract coordinates
posmo_coord <- st_coordinates(posmo)

# create one dataframe
posmo <- cbind(posmo, posmo_coord)
```


#### Filter transport modes

We only need transportation modes that generate carbon dioxide emissions. Namely, these are car, bus, train, airplane and tram. Therefore, we exclude all other transportation modes.

```{r filter transportation modes}
# get all the transportation modes
unique(posmo$transport_mode)

# save transportation modes we need in a vector
transport_modes = c("Car", "Bus", "Train", "Tram", "Airplane", "Bike", "E_Bike")

# filter to only the transportation modes we need
posmo_filter <- posmo |>
  filter(transport_mode %in% transport_modes)
```

Now, all the tracks with a transportation mode that causes carbon emissions are imported. In a next step, we plot the tracks to get an overview over them.

```{r plot all tracks}
# plot the tracks
ggplot(posmo_filter, aes(color = transport_mode)) + 
  geom_sf()+
  coord_sf(datum = st_crs(2056))
```

#### Filter static points

```{r}
# functions to determine moving window
movingWindowLag <- function(E, N, n){
  sqrt((lag(E, n) - E)^2 + (lag(N, n) - N)^2)
}

movingWindowLead <- function(E, N, n){
  sqrt((E - lead(E, n))^2 + (N - lead(N, n))^2)
}
```

```{r}
# calculate moving window
posmo_filter <- posmo_filter |>
  mutate(
    minus3 = movingWindowLag(X, Y, 3),
    minus2 = movingWindowLag(X, Y, 2),
    minus1 = movingWindowLag(X, Y, 1),
    plus1 = movingWindowLead(X, Y, 1),
    plus2 = movingWindowLead(X, Y, 2),
    plus3 = movingWindowLead(X, Y, 3)
  )

# calculate the mean steplength
posmo_filter <- posmo_filter |>
  rowwise() |>
  mutate(
    stepMean = mean(c(minus3, minus2, minus1, plus1, plus2, plus3))
  ) |>
  ungroup()

# define a column 'static'
posmo_filter <- posmo_filter |>
    ungroup() |>
    mutate(static = stepMean < 50)
```

```{r}
summary(posmo_filter)

# plot the trajectories according to color
posmo_filter |>
  ggplot(aes(X,Y)) +
  geom_point(aes(colour = static)) +
  geom_path() +
  coord_fixed()

# remove static points
posmo_filter <- posmo_filter |>
    filter(!static)
```

#### DHM

For the height information we use the DHM25 which can be downloaded as .asc file from swisstopo (https://www.swisstopo.admin.ch/de/geodata/height/dhm25.html#download). It has a resolution of 25 meters and its coordinate reference system is LV03 (EPSG: 21781).

```{r read DHM}
# read the raster data using the terra package
dhm25 <- terra::rast("data/DHM25/dhm25_grid_raster.asc")

# set the raster crs to LV03
crs(dhm25) <- terra::crs("+init=EPSG:21781")
```

```{r convert posmo data to LV03}
# convert posmo data to LV03 to match the CRS of the dhm25
posmo_filter_lv03 <- posmo_filter |>
  st_transform(crs = 21781) |>
  subset(select = -c(X, Y))
```

```{r extract the height information of the DHM}
# extract the height information for each posmo location
height_dhm <- extract(dhm25, posmo_filter_lv03)

# join the height back to the posmo data
posmo_filter$height <- height_dhm$dhm25_grid_raster
```

#### Filter segment locations

As is visible in the figure, there are not only data points within Switzerland, but also outside. Therefore, we cut our extent down to only Switzerland. The polygons of Switzerland and of the cantons were downloaded from swisstopo as a geodatabase (.gdb) and preprocessed in QGIS. We excluded Liechtenstein from the Swiss boundaries and converted Switzerland's border as well as the cantons to a geopackage (.gpkg).

```{r filter Posmo tracks to CH and ZH}
# read Switzerland and the cantons
CH_boundaries <- st_read("data/swissboundaries3D/CH_boundaries.gpkg", crs = 2056)
CH_cantons <- st_read("data/swissboundaries3D/CH_cantons.gpkg", crs = 2056)

# filter Zurich
zurich <- CH_cantons |> 
  filter(NAME == "Zürich")

# transform the coordinate system to the Swiss crs to intersect with boundaries
posmo_filter <- posmo_filter |>
  st_transform(crs = 2056)

# get only the coordinates of the transformed Posmo data
posmo_coord <- st_coordinates(posmo_filter)

# append the single X and Y value to the sf object
posmo_filter$X <- posmo_coord[,1]
posmo_filter$Y <- posmo_coord[,2]

# filter points that are within Switzerland
posmo_CH <- st_filter(posmo_filter, CH_boundaries)

# check if it worked (Switzerland)
ggplot(posmo_CH, aes(color = transport_mode)) + 
  geom_sf() +
  coord_sf(datum = st_crs(2056))+
  labs(x = "E",
       y = "N",
       title = "Posmo tracks in Switzerland") +
  guides(color = guide_legend(title = "Transport Mode"))

# filter points that are within Zurich
posmo_ZH <- st_filter(posmo_filter, zurich)

# check if it worked (Zurich)
ggplot(posmo_ZH, aes(color = transport_mode)) + 
  geom_sf() +
  coord_sf(datum = st_crs(2056))+
  labs(x = "E",
       y = "N",
       title = "Posmo tracks in the canton of Zurich") +
  guides(color = guide_legend(title = "Transport Mode"))+
  theme_minimal()
```

### First analysis

In the first step of the analysis we use a constant value to define the carbon dioxide emissions of all the Posmo tracks. These constants are defined below.

```{r constants for emissions}
# for plane [g/km]
c_plane <- 200

# for cars: we have various sources, therefore, we take a mean value [g/km]
c_car <- c(130, 162, 122.3, 200) |> 
  mean()

# for buses
c_bus <- c(42, 108, 88.7, 25.15) |>
  mean()

# for trains
c_train <- c(93, 110.9) |>
  mean()

# for trams
c_tram <- c(80, 37) |>
  mean()

# for e-bikes
c_ebike <- 14

# for bikes
c_bike <- 8
```

```{r function to get the number of days per user}
# define a function to get the number of weekdays recorded per user id
get_days <- function(user, posmo_data){
  # filter the user
  posmo_user <- posmo_data |>
    filter(user_id == user)
  
  # convert the datetime format to days and get the unique days
  recorded_days <- unique(as.Date(posmo_user$datetime, format = "%d"))
  
  # return the number of unique days
  return(length(recorded_days))
}
```

#### Trajectories within the canton of Zurich

```{r number of days per user ZH}
# save the unique user_ids in the data set
posmo_ZH_userids <- unique(posmo_ZH$user_id) 

# make an empty data frame with the number of days per users
posmo_ZH_days_per_user <- data.frame(user_id = posmo_ZH_userids)

# create an empty vector to append
number_of_days = c()
number_of_weeks = c()

# use the created function
for (i in posmo_ZH_userids){
  day = get_days(i, posmo_ZH)
  number_of_days <- append(number_of_days, day)
  week = day/7
  number_of_weeks <- append(number_of_weeks, week)
}

# add the number of days and weeks to the user_id
posmo_ZH_days_per_user$days <- number_of_days
posmo_ZH_days_per_user$weeks <- round(number_of_weeks, 3)

```

We can now sum the length [km] per transportation medium and person to get an idea about their carbon dioxide emissions. Because the different users recorded a different amount of days and weeks, we divide the emissions by the number of weeks. Therefore, we get the average weekly emissions per user.

```{r calculate emissions ZH}
# calculate the distances [m], the timelag [s], the speed [m/s], and the speek [km/h]: use group_by to make sure it only calculates for one user id and not between different user ids
posmo_ZH <- posmo_ZH |>
  group_by(user_id)|>
  mutate(
    distance_m = sqrt((lead(X, 1) - X)^2 + (lead(Y, 1) - Y)^2),
    distance_km = distance_m/1000,
    timelag_s = as.integer(difftime(lead(datetime), datetime),
                           units = "secs"),
    speed_ms = (distance_m/timelag_s),
    speed_kmh = (speed_ms*3.6)
    ) |>
  ungroup()

# remove NA distance values
posmo_ZH <- posmo_ZH |> 
  filter(!is.na(distance_km))

# group by user_id and transport_mode and sum up the distance in km
posmo_ZH_traveldistance <- 
  posmo_ZH |> 
  group_by(user_id, transport_mode) |>
  summarise(sum_km = sum(distance_km))

# create a look-up table for the different emission constants
constants_table <- data.frame(
  transport_mode = c("Airplane", "Bike", "Bus", "Car", "E_Bike", "Train", "Tram"),
  constant_gkm = c(c_plane, c_bike, c_bus, c_car, c_ebike, c_train, c_tram),
  stringsAsFactors = FALSE
)

# join the lookup table to the initial data frame
posmo_ZH_traveldistance <- posmo_ZH_traveldistance |> 
  left_join(constants_table, by = "transport_mode")

# join the number of recording days to the data frame
posmo_ZH_traveldistance <- posmo_ZH_traveldistance |> 
  left_join(posmo_ZH_days_per_user, by = "user_id")

# multiply the CO2 emissions constant with the traveled distance and divide by the number of recorded days/weeks
posmo_ZH_traveldistance <- posmo_ZH_traveldistance |>
  mutate(co2_emissions_g = sum_km * constant_gkm,
         co2_emissions_g_per_d = co2_emissions_g/days,
         co2_emissions_g_per_w = co2_emissions_g/weeks)

```

We create a bar chart to have an overview.

```{r total emission ZH}
# calculate the total emissions by user ID and transportation mode
emissions_ZH <- aggregate(co2_emissions_g_per_w ~ user_id + transport_mode, posmo_ZH_traveldistance, sum)

# create the bar chart
ggplot(emissions_ZH, aes(x = user_id, y = co2_emissions_g_per_w, fill = transport_mode)) +
  geom_bar(stat = "identity", position = "dodge") +
  labs(x = "Users", y = "Total Emissions [g/week]", fill = "Transport Mode",
       subtitle = "Movement trajectories within the canton of Zurich") +
  ggtitle("Total Emissions by User ID and Transportation Mode per Week") +
  theme_minimal()+
  theme(axis.text.x = element_blank())
```

#### Trajectories in Switzerland

```{r number of days and weeks per user CH}
# save the unique user_ids in the data set
posmo_CH_userids <- unique(posmo_CH$user_id) 

# make an empty data frame with the number of days per users
posmo_CH_days_per_user <- data.frame(user_id = posmo_CH_userids)

# create an empty vector to append
number_of_days = c()
number_of_weeks = c()

# use the created function
for (i in posmo_CH_userids){
  day = get_days(i, posmo_CH)
  number_of_days <- append(number_of_days, day)
  week = day/7
  number_of_weeks <- append(number_of_weeks, week)
}

# add the number of days and weeks rounded to 3 digits to the user_id
posmo_CH_days_per_user$days <- number_of_days
posmo_CH_days_per_user$weeks <- round(number_of_weeks, 3)
```

We can now sum the length [km] per transportation medium and person to get an idea about their carbon dioxide emissions. Because the different users recorded a different amount of days, we divide the emissions by the number of weeks. Therefore, we get the average weekly emissions per user.

```{r calculate emissions CH}
# calculate the distances [m], the timelag [s], the speed [m/s], and the speek [km/h]: use group_by to make sure it only calculates for one user id and not between different user ids
posmo_CH <- posmo_CH |>
  group_by(user_id)|>
  mutate(
    distance_m = sqrt((lead(X, 1) - X)^2 + (lead(Y, 1) - Y)^2),
    distance_km = distance_m/1000,
    timelag_s = as.integer(difftime(lead(datetime), datetime),
                           units = "secs"),
    speed_ms = (distance_m/timelag_s),
    speed_kmh = (speed_ms*3.6)
    ) |>
  ungroup()

# remove NA distance values
posmo_CH <- posmo_CH |> 
  filter(!is.na(distance_km))

# group by user_id and transport_mode and sum up the distance in km
posmo_CH_traveldistance <- 
  posmo_CH |> 
  group_by(user_id, transport_mode) |>
  summarise(sum_km = sum(distance_km))

# join the lookup table to the initial data frame
posmo_CH_traveldistance <- posmo_CH_traveldistance |> 
  left_join(constants_table, by = "transport_mode")

# join the number of recording days to the data frame
posmo_CH_traveldistance <- posmo_CH_traveldistance |> 
  left_join(posmo_CH_days_per_user, by = "user_id")

# multiply the CO2 emissions constant with the traveled distance and divide by the number of recorded days
posmo_CH_traveldistance <- posmo_CH_traveldistance |>
  mutate(co2_emissions_g = sum_km * constant_gkm,
         co2_emissions_g_per_d = co2_emissions_g/days,
         co2_emissions_g_per_w = co2_emissions_g/weeks)

```

We create a bar chart to have an overview.

```{r total emissions CH}
# calculate the total emissions by user ID and transportation mode
emissions_CH <- aggregate(co2_emissions_g_per_w ~ user_id + transport_mode, posmo_CH_traveldistance, sum)

# create the bar chart
ggplot(emissions_CH, aes(x = user_id, y = co2_emissions_g_per_w, fill = transport_mode)) +
  geom_bar(stat = "identity", position = "dodge") +
  labs(x = "Users", y = "Total Emissions [g/week]", fill = "Transport Mode",
       subtitle = "Movement trajectories in Switzerland") +
  ggtitle("Total Emissions by User ID and Transportation Mode per Week") +
  theme_minimal()+
  theme(axis.text.x = element_blank())
```

We also plot the first results.

```{r plot emissions CH and ZH}
# for all of Switzerland
ggplot() + 
  geom_sf(data = CH_cantons, aes(alpha = 100)) +
  geom_sf(data = posmo_CH_traveldistance, aes(color = co2_emissions_g_per_w))+
  labs(title = "Total Emissions per Transport Mode and User",
     subtitle = "Movement trajectories in Switzerland",
     x = "E",
     y = "N")+
  scale_color_continuous(name = "CO2 emissions [g/week]", type = "viridis")+
  scale_alpha_continuous(guide = "none") +
  coord_sf(datum = st_crs(2056))

# for Zurich
ggplot() + 
  geom_sf(data = zurich, aes(alpha = 100)) +
  geom_sf(data = posmo_ZH_traveldistance, aes(color = co2_emissions_g_per_w))+
  labs(title = "Total Emissions per Transport Mode and User",
     subtitle = "Movement trajectories in the Canton of Zurich",
     x = "E",
     y = "N")+
  scale_color_continuous(name = "CO2 emissions [g/week]", type = "viridis")+
  scale_alpha_continuous(guide = "none") +
  coord_sf(datum = st_crs(2056))+
  theme_minimal()

```

```{r function to get the weekly emissions}
# define a function to get the number of weekdays recorded per user id
weekly_emissions <- function(posmo_data, constants){
  # make sure Date is provided as date and not as datetime
  posmo_data$week <- isoweek(as.Date(posmo_data$datetime))
  weekly_distance <- aggregate(distance_km ~ user_id + week + transport_mode, posmo_data, FUN = sum)
  weekly_emission <- weekly_distance |>
    left_join(constants, by = "transport_mode")
  weekly_emission <- weekly_emission |>
    mutate(
      co2_emission = distance_km * constant_gkm
    )
  return(weekly_emission)
}

weekly_emission_zh <- weekly_emissions(posmo_ZH, constants_table)

# ist das selbe wie über alles gemittelt
#weekly_emission_zh_mean <- aggregate(constant_gkm ~ user_id, weekly_emission_zh, FUN = mean)

```

#### Slope

```{r plot height values for all posmo data}
ggplot() + 
  geom_sf(posmo_CH, aes(color = height)) +
  coord_sf(datum = st_crs(2056))+
  labs(x = "E",
       y = "N",
       title = "Elevation of posmo locations",
       subtitle = "Posmo data from Switzerland") +
  guides(color = guide_legend(title = "Elevation [m a.s.l.]"))+
  theme_minimal()
```

```{r calculate slope in percentage, warning = FALSE}
# for Zurich
posmo_ZH <- posmo_ZH |>
  group_by(user_id)|>
  mutate(
    height_diff = lead(height, 1) - height,
    horizontal_diff = sqrt((plus1**2)- (height_diff**2)),
    slope_percent = (height_diff / horizontal_diff)*100
    )|>
  ungroup()

# for Switzerland
posmo_CH <- posmo_CH |>
  group_by(user_id)|>
  mutate(
    height_diff = lead(height, 1) - height,
    horizontal_diff = sqrt((plus1**2)-(height_diff**2)),
    slope_percent = (height_diff / horizontal_diff)*100
    )|>
  ungroup()
```

#### Speed

##### Car

One variable that also influences carbon emission is the speed. We know the change in emission for some speed values 100 and 130 km/h (Umweltbundesamt, 2023). As we also need to know the emission values for slower speeds, we estimated them using a non-linear least squares regression. However, for a certain speed, we believe that there is no more reduction of carbon emissions possible. We set this threshold at *XX* km/h.

```{r interpolation of car speed values}
# save speed and their respective emission values [g/km] as variables
speed <- c(100, 110, 120, 130)
emission <- c(146, 158, 172, 190)

# plot them
ggplot()+
  geom_point(aes(x = speed, y = emission))+
  geom_line(aes(x = speed, y = emission))+
  labs(title = "Car CO2 emission values depending on speed",
       x = "Speed [km/h]",
       y = "CO2 Emission [g/km]")

# fit a non-linear least squares regression
fit_emission <- nls(emission ~ a * exp(b * speed), start = list(a = 100, b = 0.02))

# predicting new estimation values
speed_new <- seq(30, 130, by = 5)
emission_pred <- predict(fit_emission, newdata = data.frame(speed = speed_new))

# save the new values in a data frame
est_emission_car_speed <- data.frame(speed_new, emission_pred)

# plot the predicted as well as the old values
ggplot()+
  geom_point(aes(x = speed_new, y = emission_pred), color = "blue")+
  geom_line(aes(x = speed_new, y = emission_pred), color = "blue")+
  geom_point(aes(x = speed, y = emission), color = "red")+
  geom_line(aes(x = speed, y = emission), color = "red")+
  labs(title = "Estimated car CO2 emission values depending on speed",
       subtitle = "Estimated values are in blue, known values are in red.",
       x = "Speed [km/h]",
       y = "CO2 Emission [g/km]")+
  theme_minimal()
```

To join the respective emission values for each speed variable, we need to group the different car speeds to groups of five. That means if a car drives at 32 km/h it is assigned to the group 30km/h, if it drives 38km/h to the group 35km/h and so on. We use the floor function for that.

```{r}
# filter to all cars
posmo_ZH_car <- posmo_ZH |>
  group_by(user_id) |>
  filter(transport_mode == "Car") |>
  # divide the speed by 5 and multiply by 5 after flooring to get classes of interval 5
  mutate(speed_kmh_floored = floor(speed_kmh/5) * 5) |>
  ungroup()

posmo_CH_car <- posmo_CH |>
  group_by(user_id) |>
  filter(transport_mode == "Car") |>
  mutate(speed_kmh_floored = floor(speed_kmh/5) * 5) |>
  ungroup()
```

Now the speeds are ready to be joined with their respective emission values.

```{r}
# join the emission values for fast movement (car speed over 75km/h)
posmo_ZH_car_fast <- posmo_ZH_car |> 
  group_by(user_id)|>
  filter(speed_kmh_floored > 75) |>
  left_join(est_emission_car_speed, by = join_by(speed_kmh_floored == speed_new)) |>
  ungroup()

# set the emission value for slow movement (car speed under 75km/h)
posmo_ZH_car_slow <- posmo_ZH_car |>
  group_by(user_id)|>
  filter(speed_kmh_floored <= 75) |>
  mutate(emission_pred = 116.41017) |>
  ungroup()

# combine everything together
posmo_ZH_car <- rbind(posmo_ZH_car_fast, posmo_ZH_car_slow)
```

Now we can summarise the travel distance per emission value and user and multiply this with the emission in g/km to get the total emission value per 'emission category' and user. At the end, this is summed up for each user.

```{r}
# group by user_id to sum up the distance in km
posmo_ZH_car_traveldistance <- 
  posmo_ZH_car |> 
  group_by(user_id, emission_pred) |>
  summarise(sum_km = sum(distance_km)) |>
  mutate(emissions_g = sum_km * emission_pred)

# sum up per user
posmo_ZH_car_emissions <- posmo_ZH_car_traveldistance |>
  group_by(user_id)|>
  summarise(sum_emissions_g = sum(emissions_g, na.rm = TRUE))

# join with the number of days & weeks per user
posmo_ZH_car_emissions <- posmo_ZH_car_emissions |> left_join(posmo_ZH_days_per_user)

# calculate emissions per week
posmo_ZH_car_emissions <- posmo_ZH_car_emissions |>
  group_by(user_id)|>
  mutate(sum_emissions_g_w = sum_emissions_g/weeks)
```

```{r}
# calculate the total emissions by user ID and transportation mode
emissions_car_ZH <- aggregate(sum_emissions_g_w ~ user_id, posmo_ZH_car_emissions, sum)

# create the bar chart
ggplot(emissions_car_ZH, aes(x = user_id, y = sum_emissions_g_w, fill = user_id)) +
  geom_bar(stat = "identity", position = "dodge") +
  labs(x = "Users", y = "Car emissions [g/week]", fill = "User",
       subtitle = "Movement trajectories within the canton of Zurich.\nCar emissions are calculated dependent on speed.") +
  ggtitle("Car emissions per week by User ID") +
  theme_minimal()+
  theme(axis.text.x = element_blank(),
        legend.position = "none")
```


#### Acceleration

```{r calcualte acceleration for Zurich}
posmo_ZH <- posmo_ZH |>
  group_by(user_id)|>
  mutate(
    speed_change_ms = lead(speed_ms, 1) - speed_ms,
    acceleration_ms2 = speed_change_ms/timelag_s,
    acceleration = acceleration_ms2 >= 0)|>
  ungroup()
```

```{r calcualte acceleration for CH}
posmo_CH <- posmo_CH |>
  group_by(user_id)|>
  mutate(
    speed_change_ms = lead(speed_ms, 1) - speed_ms,
    acceleration_ms2 = speed_change_ms/timelag_s,
    acceleration = acceleration_ms2 >= 0)|>
  ungroup()
```

```{r plot (de)acceleration for CH}
ggplot()+
  geom_sf(data = posmo_CH, aes(color = acceleration))+
  labs(title = "Locations with acceleration",
     subtitle = "Movement trajectories in Switzerland",
     x = "E",
     y = "N")+
  guides(color = guide_legend(title = "Acceleration"))+
  coord_sf(datum = st_crs(2056))+
  theme_minimal()
```

```{r plot (de)acceleration for ZH}
ggplot()+
  geom_sf(data = posmo_ZH, aes(color = acceleration))+
  labs(title = "Locations with acceleration",
     subtitle = "Movement trajectories in the canton of Zurich",
     x = "E",
     y = "N")+
  guides(color = guide_legend(title = "Acceleration"))+
  coord_sf(datum = st_crs(2056))+
  theme_minimal()
```


## Results

## Discussion

## Sources

*Dong, Yaping; Xu, Jinliang; Ni, Jie* (2022): Carbon emission model of vehicles driving at fluctuating speed on highway. In: Environmental Science and Pollution Research, Vol. 30, pp. 18064-18077.

*Suarez, Jaime; Makridis, Michail; Anesiadou, Aikaterini; Komnos, Dimitrios; Ciuffo, Biagio; Fontaras, Georgios* (2022): Benchmarking the driver acceleration impact on vehicle energy consumption and CO2 emissions. In: Transportation Research Part D, Vol. 107.

*Xu, Jinliang; Dong, Yaping & Yan, Menghua* (2020): A Model for Estimating Passenger-Car Carbon Emissions that Accounts for Uphill, Downhill and Flat Roads. In: Sustainability, Vol. 12, No. 2028.

