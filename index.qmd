---
title: The title of your Semesterproject
subtitle: A subtle subtitle
author: Laura Haus and Antonia Hehli
output: html
---

<!-- You can add  your R Code with Code chunks-->

```{r}
#| echo: false
#| warning: false
#| message: false

# You can set chunk options individually per code chunk, as was done with this
# code chunk.

# echo: false           hides the code from the generated output
# warning: false        hides warnings from the generated output
# message: false        hides messages from the generated output

# To apply the setting for all code chunks, add the options to the yaml header of the document (in between the ---) without the preceeding "#|".

```

## Settings

```{r}
# import libraries
library("dplyr")
library("ggplot2")
library("readr")
library("sf")

```

## Abstract

## Introduction

```{r}
library(ggplot2)

# Include tables with the function "kable"

knitr::kable(head(mtcars))
```

```{r}
# include plots automatically

ggplot(mtcars, aes(cyl, disp)) +
  geom_point()

```

## Material and Methods

### Preprocessing

```{r function loadPosmoData}
# define a function to load the posmo data

loadPosmoData <- function(filepath){
  read_delim(filepath, delim = ",") |>
    
    # we do not need the place name
    subset(select = -c(place_name)) |>
    
    # remove NA values for transport mode, we need a specified transport mode
    filter(!is.na(transport_mode))
  }

```

```{r use function loadPosmoData and join data frames}
# load all Posmo track files
posmo <- loadPosmoData("data/posmo_tracks/posmo.csv")
posmo1 <- loadPosmoData("data/posmo_tracks/posmo_1.csv")
posmo2 <- loadPosmoData("data/posmo_tracks/posmo_2.csv")
posmo3 <- loadPosmoData("data/posmo_tracks/posmo_3.csv")
posmo4 <- loadPosmoData("data/posmo_tracks/posmo_4.csv")
posmo5 <- loadPosmoData("data/posmo_tracks/posmo_5.csv")
posmo6 <- loadPosmoData("data/posmo_tracks/posmo_6.csv")

# join the data frames together
posmo_joined <- full_join(posmo, posmo1)
posmo_joined <- full_join(posmo_joined, posmo2)
posmo_joined <- full_join(posmo_joined, posmo3)
posmo_joined <- full_join(posmo_joined, posmo4)
posmo_joined <- full_join(posmo_joined, posmo5)

# make the last join and convert to a sf object
posmo_joined <- full_join(posmo_joined, posmo6) |>
  st_as_sf(coords = c("lon_x", "lat_y"), crs = 4326)
```

We only need transportation modes that generate carbon dioxide emissions. Namely, these are car, bus, train, airplane and tram. Therefore, we exclude all other transportation modes.

```{r filter transportation modes}
# get all the transportation modes
unique(posmo_joined$transport_mode)

# save transportation modes we need in a vector
transport_modes = c("Car", "Bus", "Train", "Tram", "Airplane")

# filter to only the transportation modes we need
posmo_filter <- posmo_joined |>
  filter(transport_mode %in% transport_modes)

```

Now, all the tracks with a transportation mode that causes carbon emissions are imported. In a next step, we plot the tracks to get an overview over them.

```{r plot all tracks}
# plot the tracks
ggplot(posmo_filter, aes(color = transport_mode)) + 
  geom_sf()
```

As is visible in the figure, there are not only data points within Switzerland, but also outside. Therefore, we cut our extent down to only Switzerland. The polygons of Switzerland and of the cantons were downloaded from swisstopo as a geodatabase (.gdb) and preprocessed in QGIS. We excluded Liechtenstein from the Swiss boundaries and converted Switzerland's border as well as the cantons to a geopackage (.gpkg).

```{r filter Posmo tracks to CH and ZH}
# read Switzerland and the cantons
CH_boundaries <- st_read("data/swissboundaries3D/CH_boundaries.gpkg", crs = 2056)
CH_cantons <- st_read("data/swissboundaries3D/CH_cantons.gpkg", crs = 2056)

# filter Zurich
zurich <- CH_cantons |> 
  filter(NAME == "ZÃ¼rich")

# transform the coordinate system to the Swiss crs to intersect with boundaries
posmo_filter <- posmo_filter |>
  st_transform(crs = 2056)

# filter points that are within Switzerland
posmo_CH <- st_filter(posmo_filter, CH_boundaries)

# check if it worked (Switzerland)
ggplot(posmo_CH, aes(color = transport_mode)) + 
  geom_sf() +
  coord_sf(datum = st_crs(2056))

# filter points that are within Zurich
posmo_ZH <- st_filter(posmo_filter, zurich)

# check if it worked (Zurich)
ggplot(posmo_ZH, aes(color = transport_mode)) + 
  geom_sf() +
  coord_sf(datum = st_crs(2056))

```

## Results

## Discussion
